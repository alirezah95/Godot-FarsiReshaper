#ifndef FARSICHARSDICT_CPP
#define FARSICHARSDICT_CPP

#include <memory>
#include <map>
#include <vector>

using std::map;
using std::vector;
using std::pair;
using std::shared_ptr;
using std::make_shared;

namespace Farsi {
	class AlphabetDict;
}

class Farsi::AlphabetDict
{
private:
	shared_ptr<map<uint16_t, vector<uint8_t>>> mAlphabets = nullptr;
	shared_ptr<map<uint16_t, vector<uint8_t>>> mSpecials = nullptr;
	shared_ptr<pair<uint8_t, uint8_t>> mOthersRange = nullptr;
	shared_ptr<map<uint16_t, uint8_t>> mNumbers = nullptr;
	AlphabetDict()
	{
		/*
		 * Initializing Farsi Alphabets in a map (AlphabetDict)
		 */
		mAlphabets = make_shared<map<uint16_t, vector<uint8_t>>>(
			map<uint16_t, vector<uint8_t>>{
				{0x622, {0xba, 0x81, 0xba, 0x82} },
				{0x623, {0xba, 0x83, 0xba, 0x84} },
				{0x624, {0xba, 0x85, 0xba, 0x86} },
				{0x625, {0xba, 0x87, 0xba, 0x88} },
				{0x626, {0xba, 0x89, 0xba, 0x8a, 0xba, 0x8b, 0xba, 0x8c} },
				{0x627, {0xba, 0x8d, 0xba, 0x8e} },
				{0x628, {0xba, 0x8f, 0xba, 0x90, 0xba, 0x91, 0xba, 0x92} },
				{0x629, {0xba, 0x93, 0xba, 0x94} },
				{0x62a, {0xba, 0x95, 0xba, 0x96, 0xba, 0x97, 0xba, 0x98} },
				{0x62b, {0xba, 0x99, 0xba, 0x9a, 0xba, 0x9b, 0xba, 0x9c} },
				{0x62c, {0xba, 0x9d, 0xba, 0x9e, 0xba, 0x9f, 0xba, 0xa0} },
				{0x62d, {0xba, 0xa1, 0xba, 0xa2, 0xba, 0xa3, 0xba, 0xa4} },
				{0x62e, {0xba, 0xa5, 0xba, 0xa6, 0xba, 0xa7, 0xba, 0xa8} },
				{0x62f, {0xba, 0xa9, 0xba, 0xaa} },
				{0x630, {0xba, 0xab, 0xba, 0xac} },
				{0x631, {0xba, 0xad, 0xba, 0xae} },
				{0x632, {0xba, 0xaf, 0xba, 0xb0} },
				{0x633, {0xba, 0xb1, 0xba, 0xb2, 0xba, 0xb3, 0xba, 0xb4} },
				{0x634, {0xba, 0xb5, 0xba, 0xb6, 0xba, 0xb7, 0xba, 0xb8} },
				{0x635, {0xba, 0xb9, 0xba, 0xba, 0xba, 0xbb, 0xba, 0xbc} },
				{0x636, {0xba, 0xbd, 0xba, 0xbe, 0xba, 0xbf, 0xbb, 0x80} },
				{0x637, {0xbb, 0x81, 0xbb, 0x82, 0xbb, 0x83, 0xbb, 0x84} },
				{0x638, {0xbb, 0x85, 0xbb, 0x86, 0xbb, 0x87, 0xbb, 0x88} },
				{0x639, {0xbb, 0x89, 0xbb, 0x8a, 0xbb, 0x8b, 0xbb, 0x8c} },
				{0x63a, {0xbb, 0x8d, 0xbb, 0x8e, 0xbb, 0x8f, 0xbb, 0x90} },
				{0x641, {0xbb, 0x91, 0xbb, 0x92, 0xbb, 0x93, 0xbb, 0x94} },
				{0x642, {0xbb, 0x95, 0xbb, 0x96, 0xbb, 0x97, 0xbb, 0x98} },
				{0x643, {0xbb, 0x99, 0xbb, 0x9a, 0xbb, 0x9b, 0xbb, 0x9c} },
				{0x644, {0xbb, 0x9d, 0xbb, 0x9e, 0xbb, 0x9f, 0xbb, 0xa0} },
				{0x645, {0xbb, 0xa1, 0xbb, 0xa2, 0xbb, 0xa3, 0xbb, 0xa4} },
				{0x646, {0xbb, 0xa5, 0xbb, 0xa6, 0xbb, 0xa7, 0xbb, 0xa8} },
				{0x647, {0xbb, 0xa9, 0xbb, 0xaa, 0xbb, 0xab, 0xbb, 0xac} },
				{0x648, {0xbb, 0xad, 0xbb, 0xae} },
				{0x649, {0xbb, 0xaf, 0xbb, 0xb0} },
				{0x64a, {0xbb, 0xb1, 0xbb, 0xb2, 0xbb, 0xb3, 0xbb, 0xb4} },
				{0x67e, {0xad, 0x96, 0xad, 0x97, 0xad, 0x98, 0xad, 0x99} },
				{0x686, {0xad, 0xba, 0xad, 0xbb, 0xad, 0xbc, 0xad, 0xbd} },
				{0x698, {0xae, 0x8a, 0xae, 0x8b} },
				{0x6a9, {0xae, 0x8e, 0xae, 0x8f, 0xae, 0x90, 0xae, 0x91} },
				{0x6af, {0xae, 0x92, 0xae, 0x93, 0xae, 0x94, 0xae, 0x95} },
				{0x6cc, {0xbb, 0xb1, 0xbb, 0xb2, 0xbb, 0xb3, 0xbb, 0xb4} }
		});

		mSpecials = make_shared<map<uint16_t, vector<uint8_t>>>(
			map<uint16_t, vector<uint8_t>>{
				{0x60c, {0xd8, 0x8c}}, /* Farsi COMMA */
				{0x61b, {0xd8, 0x9b}}, /* Farsi SEMICOLON */
				{0x61f, {0xd8, 0x9f}}, /* Farsi QUESTION_MARK */
				{0x621, {0xd8, 0xa1}}, /* Farsi HAMZE */
				{0x64b, {0xd9, 0x8b}}, /* Farsi FATHATAN */
				{0x64e, {0xd9, 0x8e}}, /* Farsi FATHEH */
				{0x61f, {0xd9, 0x8f}}, /* Farsi THAMEH */
				{0x650, {0xd9, 0x90}}, /* Farsi KASREH */
				{0x66a, {0xd9, 0xaa}}, /* Farsi PERCENT */
				{0x200C, {0xe2, 0x80, 0x8c}}  /* Farsi HALF_SPACE */
		});
		/*
		 * The mOthers value shows the ranges of characters of which
		 * the unicode codepoint and the utf8 values are the same, like
		 * English characters, +, -, *, {, }, [, ] and so on.
		 */
		mOthersRange = make_shared<pair<uint8_t, uint8_t>>(0x00, 0x7f);

		mNumbers = make_shared<map<uint16_t, uint8_t>>(
			map<uint16_t, uint8_t>{
				{0x6f0, 0xb0}, {0x6f1, 0xb1}, {0x6f2, 0xb2}, {0x6f3, 0xb3}, {0x6f4, 0xb4},
				{0x6f5, 0xb5}, {0x6f6, 0xb6}, {0x6f7, 0xb7}, {0x6f8, 0xb8}, {0x6f9, 0xb9}
		});

	}// constructor
public:
	const uint8_t cNUMBER_FIRST_BYTE = 0xdb;

	static AlphabetDict& getAlphabetDictionary()
	{
		static AlphabetDict dict;
		return dict;
	}

	auto getAlphabets() { return mAlphabets; }

	auto getNumbers() { return mNumbers; }

	auto getSpecials() { return mSpecials; }

	auto getOthersRange() { return mOthersRange; }

	~AlphabetDict()
	{
		mAlphabets = nullptr;
	}

};

#endif // FARSICHARSDICT_HPP
